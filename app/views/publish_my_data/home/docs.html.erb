<%
	@advanced_section = true
	page_title "Developer Documentation"
%>

<% content_for :header do %>
  <h3>Developer Documentation</h3>
  <h1>Using our API</h1>
<% end %>

<% content_for :head do %>
	<style>
		.docs  					{font-size:14px;} /* inconsistent, yes, but restores heierarchy to headings, which we need, because it's a text-heavy page*/
		.docs  					{margin-bottom: 60px;} /* hack to make bottom of the page  pretty */
		.docs aside  			{color:#999;font-style:italic;}
		.docs code,.docs pre 	{background:#ffe; border:0; color:#263F3F; display:block; font-size:0.9em; margin:10px 0; padding:10px;}
		.docs code 				{white-space:normal; word-break:normal; word-wrap:normal;}
		.docs p code 			{background:inherit; display:inline; margin:0; padding:0;}
		.docs ul				{list-style-type:none;}

		/* Pretty printing styles. Used with prettify.js. SPAN elements with the classes below are added by prettyprint. */

		.pln { color: #000 }  /* plain text */

	@media screen {
  		.str { color: #080 }  /* string content */
  		.kwd { color: #008 }  /* a keyword */
  		.com { color: #800 }  /* a comment */
  		.typ { color: #606 }  /* a type name */
  		.lit { color: #066 }  /* a literal value */
  		.pun, .opn, .clo { color: #660 } /* punctuation, lisp open bracket, lisp close bracket */
  		.tag { color: #008 }  /* a markup tag name */
  		.atn { color: #606 }  /* a markup attribute name */
  		.atv { color: #080 }  /* a markup attribute value */
  		.dec, .var { color: #606 }  /* a declaration; a variable name */
  		.fun { color: red }  /* a function name */
  	}

	</style>
<% end %>

<div class="docs"><!-- clunky wrapping class - better on body -->

<aside>
	<p>This page describes the current version of our production API, which was deployed on 26th of June 2013. This release included only backward-compatible changes. See our <a href="/changelog">Change Log</a> for more details of what changed.</p>
</aside>

<nav class='contents'>
	<h2>Contents</h2>
	<h4>
		1 -
		<strong>Linked Data API</strong>
	</h4>
	<ul>
		<li>
			<a href='#uri-dereferencing'>
				1.1
				<strong>URI Dereferencing</strong>
			</a>
		</li>
		<li>
			<a href='#resource-formats'>
				1.2
				<strong>Resource Formats</strong>
			</a>
		</li>
		<li>
			<a href='#ruby-dereferencing'>
				1.2
				<strong>Example: Dereferencing URIs with Ruby</strong>
			</a>
		</li>
		<li>
			<a href='#curl-dereferencing'>
				1.2
				<strong>Example: Dereferencing URIs with cURL</strong>
			</a>
		</li>
	</ul>
	<h4>
		2 -
		<strong>Other Resource APIs</strong>
	</h4>
	<ul>
		<li>
			<a href='#individual-datasets'>
				2.1
				<strong>Individual Datasets</strong>
			</a>
		</li>
		<li>
			<a href='#themes'>
				2.2
				<strong>Themes</strong>
			</a>
		</li>
		<li>
			<a href='#dataset-collections'>
				2.3
				<strong>Collections of Datasets</strong>
			</a>
		</li>
		<li>
			<a href='#individual-resources'>
				2.4
				<strong>Individual Resources</strong>
			</a>
		</li>
		<li>
			<a href='#resource-collections'>
				2.5
				<strong>Collections of Resources</strong>
			</a>
		</li>
		<li>
			<a href='#resource-options-and-limits'>
				2.6
				<strong>Options and Limits</strong>
			</a>
		</li>
		<li>
			<a href='#ruby-resources-example'>
				2.7
				<strong>Example: Using Ruby to get a filtered list of resources</strong>
			</a>
		</li>
		<li>
			<a href='#js-resources-example'>
				2.9
				<strong>Example: Using JavaScript to get a filtered list of resources</strong>
			</a>
		</li>
		<li>
			<a href='#curl-resources-example'>
				2.9
				<strong>Example: Using cURL to get the list of datasets in a theme</strong>
			</a>
		</li>
	</ul>
	<h4>
		3 -
		<strong>SPARQL</strong>
	</h4>
	<ul>
		<li>
			<a href='#sparql-introduction'>
				3.1
				<strong>Introduction to SPARQL</strong>
			</a>
		</li>
		<li>
			<a href='#sparql-results-formats'>
				3.2
				<strong>SPARQL Results Formats</strong>
			</a>
		</li>
		<li>
			<a href='#sparql-results-pagination'>
				3.3
				<strong>SPARQL Results Pagination</strong>
			</a>
		</li>
		<li>
			<a href='#sparql-errors'>
				3.4
				<strong>SPARQL Errors</strong>
			</a>
		</li>
		<li>
			<a href='#sparql-json-p'>
				3.5
				<strong>JSON-P</strong>
			</a>
		</li>
		<li>
			<a href='#named-graphs'>
				3.6
				<strong>Use of Named Graphs</strong>
			</a>
		</li>
		<li>
			<a href='#parameter-interpolation'>
				3.7
				<strong>Parameter Substitution</strong>
			</a>
		</li>
		<li>
			<a href='#ruby-sparql-example'>
				3.8
				<strong>Example: Using Ruby to request data from the SPARQL Endpoint</strong>
			</a>
		</li>
		<li>
			<a href='#js-sparql-example'>
				3.9
				<strong>Example: Using JavaScript to request data from the SPARQL Endpoint</strong>
			</a>
		</li>
	</ul>
	<h4>
		4 -
		<strong>General</strong>
	</h4>
	<ul>
		<li>
			<a href='#response-size-limits'>
				4.1
				<strong>Response Size Limits</strong>
			</a>
		</li>
		<li>
			<a href='#errors'>
				4.2
				<strong>Errors</strong>
			</a>
		</li>
		<li>
			<a href='#cors'>
				4.3
				<strong>CORS</strong>
			</a>
		</li>
		<li>
			<a href='#discontinued-datasets'>
				4.4
				<strong>Discontinued Datasets</strong>
			</a>
		</li>
		<li>
			<a href='#api-keys'>
				4.5
				<strong>API Keys</strong>
			</a>
		</li>
	</ul>
</nav>

<section>
	<h2>1 - Linked Data API</h2>
	<div class='subsection' id='uri-dereferencing'>
		<h3>
			1.1
			<strong>URI Dereferencing</strong>
		</h3>
		<p>Following the standard practices for Linked Data, we distinguish between a 'real-world' resource and documents about that resource. <strong>Identifiers (URIs)</strong> for the resources follow the pattern:</p>
		<code>http://THE_DOMAIN/<strong>id</strong>/{...}</code>
		<p>When you look them up you get redirected to the corresponding document about that thing. The <strong>document URLs</strong> follow the pattern:</p>
		<code>http://THE_DOMAIN/<strong>doc</strong>/{...}</code>
		<p>For example, in our Local Authorities Dataset, the URI for Cheshire East Unitary Authority is</p>
		<code>http://THE_DOMAIN/<strong>id</strong>/unitary-authority/cheshire-east</code>
		<p>If you put this into your browser you get redirected, with an HTTP status code of 303 ("See Other"), to an HTML page about Cheshire East</p>
		<code>http://THE_DOMAIN/<strong>doc</strong>/unitary-authority/cheshire-east</code>
		<p>In cases where a URI identifies something that is essentially a document (an 'information resource') then we respond with a 200, as their URI and document page URL are one and the same.  This includes <a href="#individual-datasets">Datasets</a> as well as ontology terms and concept schemes.</p>
	</div>
	<div class='subsection' id='resource-formats'>
		<h3>
			1.2
			<strong>Resource Formats</strong>
		</h3>
		<p>You can specify what format you want the resulting document to be in.  By default you get HTML in a human-readable form, but you can also ask for the document in one of several RDF formats: <strong>RDF/XML</strong>, <strong>N-triples</strong>, <strong>Turtle</strong> or <strong>JSON-LD</strong>.</p>
		<p>There are two ways to specify which format you want: you can append a <strong>format extension</strong> to the document page's URL or you can use an <strong>HTTP Accept header</strong> with the resource's URI or document page's URL.</p>
		<table class="table table-striped table-bordered table-hover">
			<thead>
				<tr>
					<th>Format</th>
					<th>Extensions</th>
					<th>Accept Headers</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class='details'>RDF/XML</td>
					<td>.rdf</td>
					<td class='hardwrap'>application/rdf+xml</td>
				</tr>
				<tr>
					<td class='details'>n-triples</td>
					<td>.nt, .txt, .text</td>
					<td class='hardwrap'>
						application/n-triples,
						text/plain
					</td>
				</tr>
				<tr>
					<td class='details'>Turtle</td>
					<td>.ttl</td>
					<td class='hardwrap'>text/turtle</td>
				</tr>
				<tr>
					<td class='details'>JSON-LD</td>
					<td>.json</td>
					<td class='hardwrap'>
						application/ld+json,
						application/json
					</td>
				</tr>
			</tbody>
		</table>
	</div>
	<div class='subsection' id='ruby-dereferencing'>
		<h3>
			1.3
			<strong>Example: Dereferencing URIs with Ruby</strong>
		</h3>
		<p>Here's an example of dereferencing a URI using the <a href="http://rubydoc.info/gems/rest-client">RestClient</a> library. Similar approaches can be taken in other languages.  This assumes you already have Ruby set up on your system. Also, if you don't already have it, you'll need to install the gem:</p>
		<code>$ gem install rest-client</code>
		<p>... and require it in your script.</p>
		<code>require 'rest-client'</code>
		<h4>
			1.3.1
			<strong>Specifying the format in an accept header - in this case RDF/XML</strong>
		</h4>
		<p>If you're using the accept header, you can directly request the URI. This involves two requests, because doing an HTTP GET on the resource identifier gives you a 303 redirect to the appropriate document page. RestClient looks after that for you.</p>
		<code class='prettyprint lang-ruby'>RestClient.get 'http://THE_DOMAIN/id/unitary-authority/cheshire-east', :accept=>'application/rdf+xml'&#x000A;</code>
		<p>You can also request the document page directly:</p>
		<code class='prettyprint lang-ruby'>RestClient.get 'http://THE_DOMAIN/doc/unitary-authority/cheshire-east', :accept=>'application/rdf+xml'&#x000A;</code>
		<h4>
			1.3.2
			<strong>Specifing the format as an extension - in this case JSON</strong>
		</h4>
		<p>If using an extension, you must request the document page directly (as '.json' is not part of the URI)</p>
		<code class='prettyprint lang-ruby'>RestClient.get 'http://THE_DOMAIN/doc/unitary-authority/cheshire-east.json'</code>
	</div>
	<div class='subsection' id='curl-dereferencing'>
		<h3>
			1.4
			<strong>Example: Dereferencing URIs with cURL</strong>
		</h3>
		<p>Here's an example of dereferencing a URI using the widely available <a href="http://curl.haxx.se">cURL</a> command line program.</p>
		<h4>
			1.4.1
			<strong>Specifying the format in an accept header - in this case Turtle</strong>
		</h4>
		<p>If you're using the accept header, you can directly request the URI. This involves two requests, because doing an HTTP GET on the resource identifier gives you a 303 redirect to the appropriate document page. cURL looks after that for you if you use the <code>-L</code> option.</p>
		<code class='prettyprint'>curl -L -H "Accept: text/turtle" http://THE_DOMAIN/id/unitary-authority/cheshire-east&#x000A;</code>
		<p>You can also request the document page directly</p>
		<code class='prettyprint'>curl -H "Accept: text/turtle" http://THE_DOMAIN/doc/unitary-authority/cheshire-east</code>
		<h4>
			1.4.2
			<strong>Specifing the format as an extension - in this case N-triples</strong>
		</h4>
		<p>If using an extension, you must request the document page directly (as '.nt' is not part of the URI)</p>
		<code class='prettyprint lang-ruby'>curl http://THE_DOMAIN/doc/unitary-authority/cheshire-east.nt</code>
	</div>
</section>

<section>
	<h2>2 - Other Resource APIs</h2>
	<p>Alongside the URI dereferencing we offer the following additional ways of accessing data in the system. Please be sure to read the <a href="#resource-options-and-limits">Options and Limits</a> section, for some background information which applies to all these APIs, such as details on data formats and pagination.</p>

	<p>Some examples of accessing the data from our APIs using different languages follow at the end of this section.</p>
	<div class='subsection' id='individual-datasets'>
		<h3>
			2.1
			<strong>Individual Datasets</strong>
		</h3>
		<p>Dataset identifiers take the form</p>
		<code>http://THE_DOMAIN/data/{dataset-short-name}</code>
		<p>where <code>{dataset-short-name}</code> is a URI section that uniquely identifies the dataset. The short name can contain lower-case letters, numbers, slashes, and hyphens.</p>
		<p>Dereferencing a dataset identifier responds with HTTP status code 200 and provides metadata about the dataset, including a link to where the dataset contents can be downloaded. For example:</p>
		<code>http://THE_DOMAIN/data/homelessness-decisions</code>
		<p>Please also see the <a href="#named-graphs">Use of Named Graphs</a> section, for how the dataset data and metadata is stored in the database.</p>
	</div>
	<div class='subsection' id='themes'>
		<h3>
			2.2
			<strong>Themes</strong>
		</h3>
		<p>Datasets are grouped into Themes. A list of all themes is available at:</p><code>http://THE_DOMAIN/themes</code>
		<p>Information about a particular theme can be accessed by <a href="#uri-dereferencing">dereferencing</a> the theme's URI. e.g.</p>
		<code>http://THE_DOMAIN/def/concept/themes/homelessness</code>
	</div>
	<div class='subsection' id='dataset-collections'>
		<h3>
			2.3
			<strong>Collections of Datasets</strong>
		</h3>
		<p>A list of all datasets is available at:</p>
		<code>http://THE_DOMAIN/data</code><p>This is <a href="#resource-options-and-limits">paginatable</a> with <code>page</code> and <code>per_page</code>.</p>

		<p>Lists of datasets in a single theme are available at: <code>http://THE_DOMAIN/themes/{theme-slug}</code>, where <code>{theme-slug}</code> is the part of the theme URI after the final slash. e.g. <code>homelessness</code></p>
	</div>
	<div class='subsection' id='individual-resources'>
		<h3>
			2.4
			<strong>Individual Resources</strong>
		</h3>
		<p>As well as using <a href="#uri-dereferencing">URI dereferencing</a> to access information about individual resources, you can use the following URL pattern:</p>
		<code>http://THE_DOMAIN/resource?uri={resource-uri}</code>
		<p>This is especially useful for resources for which we have information in our database, but which aren't in the <strong>THE_DOMAIN
		</strong> domain (i.e. so you can't dereference them in our site).</p>
		<code>http://THE_DOMAIN/resource?uri=http://data.ordnancesurvey.co.uk/id/postcodeunit/SW1A1AA</code>
		<p>If using a format extension to request a particular format for the resource, the extension is added immediately after '/resource', for example to get a JSON-LD version of the above postcode</p>
		<code>http://THE_DOMAIN/resource.json?uri=http://data.ordnancesurvey.co.uk/id/postcodeunit/SW1A1AA</code>
	</div>
	<div class='subsection' id='resource-collections'>
		<h3>
			2.5
			<strong>Collections of Resources</strong>
		</h3>
		<p>Collections of resources can be retrieved from <code>/resources</code> by supplying filters. For now, we just support filters for <code>dataset</code> and <code>type_uri</code>.</p>
		<table class="table table-striped table-bordered table-hover">
			<thead>
				<tr>
					<th>Filter parameter</th>
					<th>Expected value</th>
					<th>Behaviour</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class='details'>dataset</td>
					<td>The <span style="font-style:italic">short name</span> of a dataset (see <a href="#individual-datasets">above</a>).</td>
					<td>Filters the results to only include resources in the named graph of that dataset.</td>
				</tr>
				<tr>
					<td class='details'>type_uri</td>
					<td>The URI of a resource type.</td>
					<td>Filters the results to only include resources of the type identified by that URI.</td>
				</tr>
			</tbody>
		</table>
		<p>For Example:</p>
		<code>http://THE_DOMAIN/resources?dataset=local-authorities&amp;type_uri=http%3A%2F%2FTHE_DOMAIN%2Fdef%2Flocal-government%2FLondonBoroughCouncil</code></p>
	</div>
	<div class='subsection' id='resource-options-and-limits'>
		<h3>
			2.6
			<strong>Options and Limits</strong>
		</h3>
		<h4>
			2.6.1
			<strong>Formats</strong>
		</h4>
		<p>Resources accessed via our resource APIs can be accessed in the same <a href="#resource-format">choice of formats</a> as for URI dereferencing (via both <strong>format extensions</strong> or <strong>HTTP Accept headers</strong>).</p>
		<h4>
			2.6.2
			<strong>Pagination</strong>
		</h4>
		<p>For any APIs which return collections of things, the list can be paginated using <code>page</code>(default 1) and <code>per_page</code> (default 1000) query-string parameters. The maximum allowable page size will initially be set to 1000, but we may consider increasing this (as well as the default) in the future.</p>
		<h4>
			2.6.3
			<strong>Response Size Limits</strong>
		</h4>
		<p>All requests to our APIs are subject to the <a href="#response-size-limits">response size limits</a>.</p>
	</div>
	<div class='subsection' id='ruby-resources-example'>
		<h3>
			2.7
			<strong>Example: Using Ruby to get a filtered list of resources</strong>
		</h3>
		<h4>
			2.7.1
			<strong>Basic Example</strong>
		</h4>
		<p>Here we use Ruby to retrieve a list of all the <strong>observation</strong> resources in the <a href="http://THE_DOMAIN/data/homelessness-decisions">Homelessness Descisions dataset</a> as N-triples.</p>
		<p>The short name for that dataset is <code>homelessness-decisions</code>, and the URI for the observation type is <code>http://purl.org/linked-data/cube#Observation</code>, so the URL we need to call is as follows. (See <a href="#resource-collections">the Collections of Resources section</a>).</p>
		<code>http://THE_DOMAIN/resources?dataset=homelessness-decisions&amp;type_uri=http%3A%2F%2Fpurl.org%2Flinked-data%2Fcube%23Observation</code>
		<p>If you visit that URL in your browser, you'll see a paginated list of the resources. We want to get it in N-triples format, so we'll add the .nt extension. (See the <a href="#resource-formats">Formats section</a>).</p>
		<p>The following Ruby code assigns a string of N-triples into the <code>ntriples_data</code> variable. Note that as the <a href="#resource-options-and-limits">maximum page size</a> is 1000, and there are over 1000 resoures of that type in the dataset, we'll need to make multiple requests.</p>
		<p>We use the <a href="http://rubydoc.info/gems/rest-client">RestClient</a> here, which you can install with <code>$ gem install rest-client</code>.</p>
		<pre class='prettyprint lang-ruby'>require 'rest-client'&#x000A;&#x000A;url = &quot;http://THE_DOMAIN/resources.nt&quot;&#x000A;&#x000A;ntriples_data = &quot;&quot;&#x000A;page = 1&#x000A;done = false&#x000A;&#x000A;while !done&#x000A;  puts &quot;requesting page #{page}...&quot;&#x000A;  response = RestClient.get url, {:params =&gt;&#x000A;    {&#x000A;      :page =&gt; page,&#x000A;      :per_page =&gt; 1000,&#x000A;      :dataset =&gt; &quot;homelessness-decisions&quot;,&#x000A;      :type_uri =&gt; &quot;http://purl.org/linked-data/cube#Observation&quot;&#x000A;    }&#x000A;  }&#x000A;&#x000A;  if response.length &gt; 0&#x000A;    ntriples_data += response&#x000A;    page += 1&#x000A;  else&#x000A;    puts &quot;no more data&quot;&#x000A;    done = true&#x000A;  end&#x000A;end&#x000A;&#x000A;puts &quot;data:&quot;&#x000A;puts ntriples_data&#x000A;&#x000A;</pre>
		<h4>
			2.7.2
			<strong>Extension: parsing the n-triples into an array of statements.</strong>
		</h4>
		<p>The <a href="http://rubydoc.info/github/ruby-rdf/rdf/master/">ruby-rdf</a> library is useful for parsing various rdf formats. Install it with <code>$ gem install rdf</code>. The following code reads our string of ntriples data into an array of <code>RDF::Statement</code>s.</p>
		<pre class='prettyprint lang-ruby'>require 'rdf'&#x000A;&#x000A;statements = []&#x000A;RDF::Reader.for(:ntriples).new(ntriples_data) {|r| r.each {|s| statements &lt;&lt; s}}&#x000A;&#x000A;puts &quot;parsed #{statements.length} triples&quot;&#x000A;&#x000A;</pre>
		<p><strong>Note</strong>: If you're doing a lot of work with RDF in Ruby, you might want to look at using <a href="http://swirrl.com">Swirrl</a>'s open-source SPARQL ORM for Ruby, <a href="http://github.com/swirrl/tripod">Tripod</a>.</p>
	</div>
	<div class='subsection' id='js-resources-example'>
		<h3>
			2.8
			<strong>Example: Using JavaScript to get a filtered list of resources</strong>
		</h3>
		<p>Here we use jQuery to retrieve a list of all the <strong>observation</strong> resources in the <a href="http://THE_DOMAIN/data/homelessness-decisions">Homelessness Descisions dataset</a> as JSON-LD.</p>
		<p>The short name for that dataset is <code>homelessness-decisions</code>, and the URI for the observation type is <code>http://purl.org/linked-data/cube#Observation</code>, so the URL we need to call is as follows. (See <a href="#resource-collections">the Collections of Resources section</a>).</p>
		<code>http://THE_DOMAIN/resources?dataset=homelessness-decisions&amp;type_uri=http%3A%2F%2Fpurl.org%2Flinked-data%2Fcube%23Observation</code>
		<p>If you visit that URL in your browser, you'll see a paginated list of the resources. We want to get it in JSON format, so we'll add the .json extension. (See the <a href="#resource-formats">Formats section</a>).</p>
		<p>The following HTML page uses JavaScript to request the data as JSON and add it to the <code>results</code> array. Note that as the <a href="#resource-options-and-limits">maximum page size</a> is 1000, and there are over 1000 resoures of that type in the dataset, we'll need to make multiple requests.</p>
		<pre class='prettyprint lang-js'>&lt;!DOCTYPE html&gt;&#x000A;&lt;html&gt;&#x000A;  &lt;head&gt;&#x000A;    &lt;script src=&quot;http://code.jquery.com/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;&#x000A;  &lt;/head&gt;&#x000A;  &lt;body&gt;&#x000A;    &lt;script type=&quot;text/javascript&quot;&gt;&#x000A;      var perPage = 100;&#x000A;      var typeUri = &quot;http://purl.org/linked-data/cube#Observation&quot;;&#x000A;      var dataset = &quot;homelessness-decisions&quot;;&#x000A;&#x000A;      var baseUrl = &quot;http://THE_DOMAIN/resources.json?&quot;&#x000A;      baseUrl += &quot;per_page=&quot; + perPage.toString();&#x000A;      baseUrl += &quot;&amp;dataset=&quot; + dataset;&#x000A;      baseUrl += &quot;&amp;type_uri=&quot; + encodeURIComponent(typeUri);&#x000A;&#x000A;      var page = 1;&#x000A;      var results = [];&#x000A;&#x000A;      function callAjaxPaging() {&#x000A;        console.log(&quot;trying page: &quot; + page.toString());&#x000A;        url = baseUrl + &quot;&amp;page=&quot; + page.toString();&#x000A;&#x000A;        $.ajax({&#x000A;          dataType: 'json',&#x000A;          url: url,&#x000A;          success: function(pageOfData) {&#x000A;            results = results.concat(pageOfData);&#x000A;            console.log(&quot;got &quot; + results.length.toString() + &quot; so far&quot;);&#x000A;&#x000A;            if (pageOfData.length == perPage) {&#x000A;              // this page was full. There might be more.&#x000A;              page += 1;&#x000A;              console.log(&quot;trying next page&quot;);&#x000A;              callAjaxPaging();&#x000A;            } else {&#x000A;              // no more pages.&#x000A;              alert('finished with ' + results.length.toString() + &quot; results&quot;);&#x000A;            }&#x000A;          }&#x000A;        });&#x000A;      }&#x000A;&#x000A;      alert('press OK to begin');&#x000A;      callAjaxPaging();&#x000A;    &lt;/script&gt;&#x000A;  &lt;/body&gt;&#x000A;&lt;/html&gt;</pre>
	</div>
	<div class='subsection' id='curl-resources-example'>
		<h3>
			2.9
			<strong>Example: Using cURL to get the list of datasets in a theme</strong>
		</h3>
		<p>Here we use the <a href="http://http://curl.haxx.se/">cURL</a> command line program to get a list of datasets in the housing theme, as JSON-LD.</p>
		<p>The slug for the housing theme is <code>housing</code>, so the URL we need to call is as follows. (See the <a href="#dataset-collections">Collections of Datasets section</a>).</p>
		<code>http://THE_DOMAIN/themes/homelessness</code>
		<p>We'll use the Accept header to tell the server we want the response as JSON.</p>
		<code class='prettyprint'>curl -H "Accept: application/json" http://THE_DOMAIN/themes/homelessness</code>
	</div>
</section>

<section>
	<h2>3 - SPARQL</h2>
	<div class='subsection' id='sparql-introduction'>
		<h3>
			3.1
			<strong>Introduction to SPARQL</strong>
		</h3>
		<p>The most flexible way to access the data is by using SPARQL. Pronounced "sparkle", SPARQL stands for <strong>S</strong>parql <strong>P</strong>rotocol and <strong>R</strong>DF <strong>Q</strong>uery <strong>L</strong>anguage. It's a query language, analagous to SQL for relational databases, for retrieving and manipulating data from triple-stores like ours. We support <a href="http://www.w3.org/TR/2013/REC-sparql11-query-20130321/">SPARQL 1.1</a> query syntax.</p>
		<p>To submit a SPARQL query from your code, issue an HTTP GET request to our <strong>endpoint</strong>:</p>
		<code>http://THE_DOMAIN/sparql?query={URL-encoded query}</code>
		<p>For example, to run this simple query...</p>
		<code class='prettyprint lang-sparql'>SELECT * WHERE {&lt;http://THE_DOMAIN/id/unitary-authority/cheshire-east&gt; ?p ?o}</code>
		<p>...and get the results as JSON, you could GET the following URL (note the <code>.json</code> extension):</p>
		<code>http://THE_DOMAIN/sparql.json?query=SELECT+%2A+WHERE+%7B%3Chttp%3A%2F%2FTHE_DOMAIN%2Fid%2Funitary-authority%2Fcheshire-east%3E+%3Fp+%3Fo%7D</code>
		<p>See below for <a href="#sparql-results-formats">details of SPARQL Results Formats</a> and examples in a variety of languages (at the end of this section).</p>
	</div>
	<div class='subsection' id='sparql-results-formats'>
		<h3>
			3.2
			<strong>SPARQL Results formats</strong>
		</h3>
		<p>As with other aspects of our API, to get the data in different formats, you can use either format extensions or HTTP Accept headers.</p>

		<p>The available formats depend on the type of SPARQL query. A SPARQL query can be one of four main forms: <strong>SELECT</strong>, <strong>ASK</strong>, <strong>CONSTRUCT</strong> or <strong>DESCRIBE</strong>.</p>
		<table class="table table-striped table-bordered table-hover">
			<thead>
				<tr>
					<th>Query Type</th>
					<th>Format</th>
					<th>Extension</th>
					<th>Accept Headers</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class='details' rowspan='4'>SELECT</td>
					<td>xml</td>
					<td>.xml</td>
					<td class='hardwrap'>
						application/xml,
						application/sparql-results+xml
					</td>
				</tr>
				<tr>
					<td>json</td>
					<td>.json</td>
					<td class='hardwrap'>
						application/json,
						application/sparql-results+json
					</td>
				</tr>
				<tr>
					<td>text</td>
					<td>.txt, .text</td>
					<td class='hardwrap'>text/plain</td>
				</tr>
				<tr>
					<td>csv</td>
					<td>.csv</td>
					<td class='hardwrap'>text/csv</td>
				</tr>
				<tr>
					<td class='details' rowspan='3'>ASK</td>
					<td>json</td>
					<td>.json</td>
					<td class='hardwrap'>
						application/json,
						application/sparql-results+json
					</td>
				</tr>
				<tr>
					<td>xml</td>
					<td>.xml</td>
					<td class='hardwrap'>
						application/xml,
						application/sparql-results+json
					</td>
				</tr>
				<tr>
					<td>text</td>
					<td>.txt, .text</td>
					<td class='hardwrap'>text/plain</td>
				</tr>
				<tr>
					<td class='details' rowspan='3'>CONSTRUCT</td>
					<td>RDF/XML</td>
					<td>.rdf</td>
					<td class='hardwrap'>application/rdf+xml</td>
				</tr>
				<tr>
					<td>N-triples</td>
					<td>.nt, .txt, .text</td>
					<td class='hardwrap'>
						text/plain,
						application/n-triples
					</td>
				</tr>
				<tr>
					<td>Turtle</td>
					<td>.ttl</td>
					<td class='hardwrap'>text/turtle</td>
				</tr>
				<tr>
					<td class='details' rowspan='3'>DESCRIBE</td>
					<td>RDF/XML</td>
					<td>.rdf</td>
					<td class='hardwrap'>application/rdf+xml</td>
				</tr>
				<tr>
					<td>N-triples</td>
					<td>.nt, .txt, .text</td>
					<td class='hardwrap'>
						text/plain,
						application/n-triples
					</td>
				</tr>
				<tr>
					<td>Turtle</td>
					<td>.ttl</td>
					<td class='hardwrap'>text/turtle</td>
				</tr>
			</tbody>
		</table>
	</div>
	<div class='subsection' id='sparql-results-pagination'>
		<h3>
			3.3
			<strong>SPARQL Results Pagination</strong>
		</h3>
		<p>We will accept <code>page</code> and <code>per_page</code> query-string parameters for paginating the results of SELECT queries.</p>
		<p>For requests made through the website (i.e. HTML format), the page size is defaulted to 20.</p>
		<p>For requests to our sparql endpoint for data formats (i.e. non-HTML), there will be no defaults for these parameters (i.e. results are unlimited).</p>
		<p>For SELECT queries, for convenience you can optionally pass the pagination parameters and we will use them to apply <code>LIMIT</code> and <code>OFFSET</code> clauses to the query. For other query types (i.e. DESCRIBE, CONSTRUCT, ASK), pagination like this doesn't make so much sense, so those parameters will be ignored.</p>
		<p>Please also refer to the <a href="#response-size-limits">Response Size Limits</a> section below, and the examples at the end of this section.</p>
	</div>
	<div class='subsection' id='sparql-errors'>
		<h3>
			3.4
			<strong>SPARQL Errors</strong>
		</h3>
		<p>If you make a SPARQL request with a malformed query in a data format (i.e. non-HTML), then we will respond with HTTP status 400, with a helpful message in the response.</p>
		<p>Additionally, please note the <a href="#response-size-limits">Response Size Limits</a>, which apply to all API calls, as well as the <a href="#errors">Errors</a> section.</p>
	</div>
	<div class='subsection' id='sparql-json-p'>
		<h3>
			3.5
			<strong>JSON-P</strong>
		</h3>
		<p>If you're requesting SPARQL results as JSON, you can additionally pass a <code>callback</code> parameter and the results will be wrapped in that function. This is useful for getting around cross-domain issues if you're running JavaScript on older browsers. (Please also see the <a href="#cors">Cross-Origin Resource Sharing</a> section).</p>
		<p>For example:</p>
		<code>http://THE_DOMAIN/sparql.json?callback=myCallbackFunction&query=SELECT+%2A+WHERE+%7B%3Chttp%3A%2F%2FTHE_DOMAIN%2Fid%2Funitary-authority%2Fcheshire-east%3E+%3Fp+%3Fo%7D</code>
		<p>Or to make a JSON-P request with jQuery, you can omit the callback parameter from the url and just set the dataType to <code>jsonp</code>.</p>
		<pre class='prettyprint lang-js'>queryUrl = 'http://THE_DOMAIN/sparql.json?query=SELECT+%2A+WHERE+%7B%3Chttp%3A%2F%2FTHE_DOMAIN%2Fid%2Funitary-authority%2Fcheshire-east%3E+%3Fp+%3Fo%7D'&#x000A;&#x000A;$.ajax({&#x000A;  dataType: 'jsonp',&#x000A;  url: queryUrl,&#x000A;  success: function(data) {&#x000A;    // callback code here&#x000A;    alert('success!');&#x000A;  }&#x000A;});</pre>
	</div>
	<div class='subsection' id='named-graphs'>
		<h3>
			3.6
			<strong>Use of Named graphs</strong>
		</h3>
		<h4>
			3.6.1
			<strong>Dataset Data</strong>
		</h4>
		<p>The data for each dataset is contained within a separate named graph. The dataset itself has a URI, for example</p>
		<code>http://THE_DOMAIN/data/local-authorities</code>
		<p>The web page for the dataset lists the named graph that contains the dataset, in this case</p>
		<code>http://THE_DOMAIN/graph/local-authorities</code>
		<p>The graph name for the dataset is contained in the dataset metadata, using a predicate called <code>http://publishmydata.com/def/dataset#graph</code> and can be obtained by a query like this:</p>
		<pre class='prettyprint lang-sparql'>SELECT ?graph&#x000A;  WHERE {&#x000A;    &lt;http://THE_DOMAIN/data/local-authorities&gt; &lt;http://publishmydata.com/def/dataset#graph&gt; ?graph&#x000A;  }</pre>
		<h4>
			3.6.2
			<strong>Dataset Metadata</strong>
		</h4>
		<p>The metadata we store about the <a href="#individual-datasets">dataset</a> itself (that is returned by dereferencing its URI), is stored its own separate graph, for example:</p>
		<code>http://THE_DOMAIN/data/local-authorities/metadata</code>
		<p>We also use named graphs for each concept scheme and ontology.</p>
	</div>
	<div class='subsection' id='parameter-interpolation'>
		<h3>
			3.7
			<strong>Parameter Substitution</strong>
		</h3>
		<p>You can parameterize your SPARQL by including %{tokens} in your queries, and providing values for the tokens on the url query string.</p>
		<code>http://THE_DOMAIN/sparql?query=URL-encoded-SPARQL-query?token1=value-for-token1&token2=value-for-token2</code>
		<p>Note that the following tokens are reserved and cannot be used as parameters for substitution.</p>
		<ul class="list-inline">
			<li>controller</li>
			<li>action</li>
			<li>page</li>
			<li>per_page</li>
			<li>id</li>
			<li>commit</li>
			<li>utf8</li>
			<li>query</li>
		</ul>
	</div>
	<div class='subsection' id='ruby-sparql-example'>
		<h3>
			3.8
			<strong>Example: Using Ruby to request data from the SPARQL Endpoint</strong>
		</h3>
		<p>This sample Ruby makes a request to our SPARQL endpoint for all resources of type Unitary Authority (as JSON) and then puts the result in a Hash.</p>
		<pre class='prettyprint lang-ruby'>require 'rest-client'&#x000A;require 'json'&#x000A;&#x000A;query = 'SELECT * WHERE {?s a &lt;http://THE_DOMAIN/def/local-government/UnitaryAuthority&gt;}'&#x000A;&#x000A;url = &quot;http://THE_DOMAIN/sparql.json&quot;&#x000A;&#x000A;results_str = RestClient.get url, {:params =&gt; {:query =&gt; query}}&#x000A;results_hash = JSON.parse results_str&#x000A;results_array = results_hash[&quot;results&quot;][&quot;bindings&quot;]&#x000A;&#x000A;puts &quot;total number of results: #{results_array.length}&quot;&#x000A;&#x000A;</pre>
		<p><strong>Note</strong>: If you're doing a lot of work with RDF in Ruby, you might want to look at using <a href="http://swirrl.com">Swirrl</a>'s open-source SPARQL ORM for Ruby, <a href="http://github.com/swirrl/tripod">Tripod</a>.</p>
	</div>
	<div class='subsection' id='js-sparql-example'>
		<h3>
			3.8
			<strong>Example: Using JavaScript to request data from the SPARQL Endpoint</strong>
		</h3>
		<p>This example HTML page uses jQuery to make a request to our SPARQL endpoint for all resources of type Unitary Authority (as JSON) and log the results.</p>
		<pre class='prettyprint lang-html'>&lt;!DOCTYPE html&gt;&#x000A;&lt;html&gt;&#x000A;  &lt;head&gt;&#x000A;    &lt;script src=&quot;http://code.jquery.com/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;&#x000A;  &lt;/head&gt;&#x000A;  &lt;body&gt;&#x000A;    &lt;script type=&quot;text/javascript&quot;&gt;&#x000A;      var query = &quot;SELECT * WHERE {?s a &lt;http://THE_DOMAIN/def/local-government/UnitaryAuthority&gt;}&quot;;&#x000A;      var url = &quot;http://THE_DOMAIN/sparql.json?query=&quot;;&#x000A;      url += encodeURIComponent(query);&#x000A;      $.ajax({&#x000A;        dataType: 'json',&#x000A;        url: url,&#x000A;        success: function(data) {&#x000A;          alert('success: ' + data.results.bindings.length + ' results');&#x000A;          console.log(data);&#x000A;        }&#x000A;      });&#x000A;    &lt;/script&gt;&#x000A;  &lt;/body&gt;&#x000A;&lt;/html&gt;</pre>
		<p><strong>Note</strong>: See the <a href="#cors">Cross-Origin Resource Sharing</a> section for a note about accessing data from from other domains.</p>
	</div>
</section>

<section class='inprogress'>
	<h2>4 - General</h2>
	<div class='subsection' id='response-size-limits'>
		<h3>
			4.1
			<strong>Response Size Limits</strong>
		</h3>
		<p>For all requests to our API, if the request issues a request to the database which causes more than 5MB of data to be returned, we will respond with HTTP status code 400, with the a message in the response body including the phrase <code>Response too large</code>. Note that full pre-canned dumps of all datasets will be available (in zipped n-triples format) at URLs defined in the <a href="#individual-datasets">dataset metadata</a>.</p>
	</div>
	<div class='subsection' id='errors'>
		<h3>
			4.2
			<strong>Errors</strong>
		</h3>
		<table class="table table-striped table-bordered table-hover">
			<thead>
				<tr>
					<th>Error type</th>
					<th>HTTP status code</th>
					<th>Notes</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>Response too large</td>
					<td>400</td>
					<td>We will include a text message in the response body including the phrase "Response too large."</td>
				</tr>
				<tr>
					<td>SPARQL Syntax Error</td>
					<td>400</td>
					<td>We will include a text message in the response body with details of the error.</td>
				</tr>
				<tr>
					<td>Resource Not Found</td>
					<td>404</td>
					<td>Returned if you request a resource or URL that doesn't exist</td>
				</tr>
				<tr>
					<td>Not Acceptable</td>
					<td>406</td>
					<td>Returned if you request a non-supported data format</td>
				</tr>
				<tr>
					<td>Unexpected Errors</td>
					<td>500</td>
					<td></td>
				</tr>
				<tr>
					<td>Query Timeouts</td>
					<td>503</td>
					<td>The timeout for requesting data from our database will initially be set to 10 seconds.</td>
				</tr>
			</tbody>
		</table>
		<br>
	</div>
	<div class='subsection' id='cors'>
		<h3>
			4.3
			<strong>Cross-Origin Resource Sharing (CORS)</strong>
		</h3>
		<p>Our web server is configured to allow access from all domains (by adding the following line to our nginx configuration):</p>
		<code>add_header Access-Control-Allow-Origin "*";</code>
		<p>This means that if you're writing JavaScript to request data from our server in to a web page hosted on another domain, your browser should check this header and allow it.</p>
		<p><strong>A Note about Browser Support for CORS:</strong> Modern browsers (such as recent versions of Internet Explorer Firefox, Chrome and Safari) have full CORS support. It is not supported in Internet Explorer 6 and 7. Versions 8 &amp; 9 of Internet Explorer offer limited support. If you need to support older browsers, consider making requests for data via SPARQL, with <a href="#sparql-json-p">JSON-P</a>.</p>
	</div>
	<div class='subsection' id='discontinued-datasets'>
		<h3>
			4.4
			<strong>Discontinued Datasets</strong>
		</h3>
		<p>A dataset can be marked as 'discontinued'. This approach is most often used in cases where a dataset uses an outdated vocabulary or outdated naming convention for URIs. This is similar to the concept of deprecation (in computer software).</p>

		<p>A discontinued dataset is assigned a type of <code>http://publishmydata.com/def/dataset#DeprecatedDataset</code> as well as the usual <code>http://publishmydata.com/def/dataset#Dataset</code>. The discontinued-status is indicated on the list of datasets in the user interface and on the individual dataset page.</p>

		<p>Optionally, a discontinued dataset may be replaced by another dataset. In this case a link to the new dataset appears on the dataset web page and the dataset metadata contains the triple:</p>
		<code>&lt;{discontinued dataset URI}&gt; &lt;http://purl.org/dc/terms/isReplacedBy&gt; &lt;{new dataset URI}&gt; .</code>
		<p>The contents of discontinued datasets are still available via SPARQL queries and other APIs. This allows us to update the way that data is represented without breaking external applications that use it. Discontinued datasets will generally be removed completely after some period of time. Information about planned deletion will be provided in the 'Further Information' section on the dataset web page.</p>
	</div>
	<div class='subsection' id='api-keys'>
		<h3>
			4.5
			<strong>API Keys</strong>
		</h3>
		<h4>
			4.5.1
			<strong>Obtaining an API key</strong>
		</h4>
		<p>You can <a href="/users/sign_up">register for an API key</a> to obtain unthrottled access to our API, analytics, and announcements about upcoming API changes. Upon registering you will be logged in and taken to your profile page which displays your unique key. You should then use the API key with all requests to our API.</p>
		<h4>
			4.5.2
			<strong>Using the API Key</strong>
		</h4>
		<p>To use the API key, supply it in your requests to our API (including for SPARQL queries) via either:</p>
		<ul>
			<li>the <code class='click-to-select'>X-PublishMyData-APIKey</code> HTTP header, or</li>
			<li>the <code class='click-to-select'>api_key</code> query string parameter</li>
		</ul>
		<br>
		<p>Note that some corporate or goverment networks may strip non-standard HTTP headers, so in these situations we recommend using the query string parameter instead.</p>
		<h4>
			4.5.3
			<strong>Supplying the API Key in an HTTP header</strong>
		</h4>
		<p>For example, using the cURL command line tool to supply the API key in an HTTP header.</p>
		<code class='prettyprint'>curl -H &quot;X-PublishMyData-APIKey: &lt;your-api-key-here&gt;&quot; &lt;request-url&gt;</code>
		<p>Replace &lt;your-api-key-here&gt; with your actual API key. e.g.</p>
		<code class='prettyprint'>curl -H &quot;X-PublishMyData-APIKey: 1a3e2562d2466ecb9462ddfd723a4597&quot; http://THE_DOMAIN/data/additional-affordable-dwellings.json</code>
		<h4>
			4.5.4
			<string>Supplying the API key in a query string parameter</string>
		</h4>
		<p>For example, using the cURL command line tool to supply the API key in the custom HTTP header.</p>
		<code class='prettyprint'>curl http://THE_DOMAIN/data/affordable-housing?api_key=&lt;your-api-key-here&gt;</code>
		<p>Replace &lt;your-api-key-here&gt; with your actual API key. For example:</p>
		<code class='prettyprint'>curl http://THE_DOMAIN/data/additional-affordable-dwellings.json?api_key=1a3e2562d2466ecb9462ddfd723a4597</code>
	</div>
</section>
<script>
 prettyPrint();
</script>
</div>